description "libvirt daemon"
author "Dustin Kirkland <kirkland@canonical.com>"

start on (runlevel [2345] and stopped networking RESULT=ok)
stop on starting rc RUNLEVEL=[016]

expect daemon
respawn

pre-start script
	mkdir -p /var/run/libvirt
	# Clean up a pidfile that might be left around
	rm -f /var/run/libvirtd.pid
end script

# by default wait up to 30 seconds for vms to shut down
env libvirtd_shutdown_timeout=30
# uris for which to shut down vms
env libvirt_uris='qemu:///system lxc:///'
# domains that should be saved and not shut down
env libvirt_save_domains='euklid'
# savedir for vm states
env libvirt_savepath='/user2/vmstate'

post-start script
	check_state()
	{
		getstate=`$VIRSH domstate $1 2>/dev/null | head -n 1`
		if [ "$getstate" = "running" ];
		then
			return 0
		else
			return 1
		fi
	}

	log_msg()
	{
		logf="/var/log/libvirt/startuplog.log"
		logger -p daemon.debug -s -t libvirt -- "$@" >> $logf 2>&1
	}

	start_domain()
	{
		log_msg "Starting domain $1..."
		virsh start $1
	}

	restore_domain()
	{
		log_msg "Restoring domain $1..."
		virsh restore $1 $libvirt_savepath/$1
	}

   for domain in $libvirt_save_domains;
   do
   	# Check that a save state file exists, otherwise just start the domain
      if [ -f $libvirt_savepath/$domain ];
	   then
	      counter=0
         # Try 3 times to resume the domain
         while [ $counter -lt 3 ]
         do
	         restore_domain $domain
            check_state $domain
            if [ $? -eq 0 ];
            then
	            counter=3
            fi
            counter=$((counter+1))
            sleep 5
         done
         rm -f $libvirt_savepath/$domain
      fi
      # Check if the domain is now running, if not start it from scratch
      check_state $domain
      if [ $? -eq 1 ];
      then
	      echo "Could not restore domain $domain, starting instead..."
         start_domain $domain
      fi
   done

end script

pre-stop script
	log_msg()
	{
		logf="/var/log/libvirt/shutdownlog.log"
		logger -p daemon.debug -s -t libvirt -- "$@" >> $logf 2>&1
	}

	run_virsh()
	{
		# We parse the output for things like domain state;
		# make sure the output is in the language we expect.
		LANG=C virsh "$@"
	}

	if [ -z "$RUNLEVEL" ]; then
		exit 0
	fi

	if [ "$RUNLEVEL" -ne 0 ] && [ "$RUNLEVEL" -ne 1 ] && [ "$RUNLEVEL" -ne 6 ]; then
		exit 0
	fi
	log_msg "libvirt-bin: entering pre-stop at $(date)"

	for domain in $libvirt_save_domains; do
		log_msg "libvirt-bin: Saving domain $domain..."
		run_virsh save $domain $libvirt_savepath/$domain 2>/dev/null
	done

	for uri in $libvirt_uris; do
		for domain in $(run_virsh -c "$uri" list | awk '$3 == "running" {print $2}'); do
			log_msg "libvirt-bin: attempting clean shutdown of $domain at $(date)"
			run_virsh -c "$uri" shutdown "$domain" >/dev/null
		done
	done

	delay=$libvirtd_shutdown_timeout
	while [ $delay -gt 0 ]; do
		for uri in $libvirt_uris; do
			if ! run_virsh -c "$uri" list | awk '$3 == "running" {exit 1}'; then
				# VMs at this URI are still running. Wait, then
				# start at the beginning looking for running VMs.
				sleep 1
				delay=$(($delay - 1))
				continue 2
			fi
		done
		break
	done

	for uri in $libvirt_uris; do
		for domain in $(run_virsh -c "$uri" list | awk '$3 == "running" {print $2}'); do
			log_msg "destroying $domain"
			run_virsh -c "$uri" destroy "$domain" >/dev/null
		done
	done
	log_msg "libvirt-bin: exiting pre-stop at $(date)"
end script

# If you used to set $libvirtd_opts in /etc/default/libvirt-bin,
# change the 'exec' line here instead.
exec /usr/sbin/libvirtd -d
